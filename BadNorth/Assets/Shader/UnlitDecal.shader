Shader "Unlit/Decal" {
	Properties {
		_MainTex ("Texture", 2D) = "white" {}
		_Color ("Color", Vector) = (0.5,0.5,0.5,1)
		[Toggle] _Paint ("Paint", Float) = 0
		[Toggle] _Selected ("Selected", Float) = 0
		[KeywordEnum(None, X, Y, Z)] _AXIS ("Primary Axis", Float) = 0
		[KeywordEnum(None, Up, Cliff, Tree)] _COLOR ("Color Mode", Float) = 0
		_Stencil ("Stencil ID", Float) = 2
	}
	SubShader {
		LOD 100
		Tags { "RenderType" = "Opaque" }
		Pass {
			LOD 100
			Tags { "RenderType" = "Opaque" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			BlendOp Min, Min
			ZWrite Off
			Cull Off
			Stencil {
				Comp GEqual
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 52025
			Program "vp" {
				SubProgram "d3d11 " {
					Keywords { "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[58];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1.x = 0.0;
					    u_xlat0 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat3 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * u_xlat3 + _CliffParams.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2[37];
						float _Year;
						vec4 unused_0_4[3];
						vec4 _LongshipColor;
						vec4 unused_0_6[3];
						vec4 _SnowColor;
						vec4 unused_0_8;
						float _SnowAmount;
						vec4 unused_0_10[12];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1 = 0.0;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xzw = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat1 = u_xlat0.zzzz * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat0.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat3.x = u_xlat0.x;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = max(u_xlat0.x, u_xlat3.x);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat3.xxx * u_xlat1.yzx;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat3.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _SnowColor.xyz;
					    u_xlat0.xyz = vec3(_SnowAmount) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-_LongshipColor.xyz);
					    u_xlat9 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat1.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat1.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat1.xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = u_xlat1.y * unity_ObjectToWorld[1].y;
					    u_xlat9 = unity_ObjectToWorld[0].y * u_xlat1.x + u_xlat9;
					    u_xlat9 = unity_ObjectToWorld[2].y * u_xlat1.z + u_xlat9;
					    u_xlat9 = u_xlat9 * 0.0599999987 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat21;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat11.xzy;
					    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat11.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat2.y * u_xlat33;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat35;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat35;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat13.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat13.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat13.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat13.zx, 0.0);
					    u_xlat4.w = u_xlat13.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat33 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat1.w;
					    u_xlat3.y = u_xlat1.w * 0.100000001;
					    u_xlat34 = u_xlat2.x * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat37;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat13.y + u_xlat13.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat14.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat14.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat14.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat14.xyz = u_xlat0.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat11.x = u_xlat11.y + u_xlat11.x;
					    u_xlat11.x = u_xlat13.z * u_xlat14.z + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat11.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat11.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat21;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat11.xzy;
					    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat11.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat2.y * u_xlat33;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat35;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat35;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat13.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat13.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat13.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat13.zx, 0.0);
					    u_xlat4.w = u_xlat13.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat33 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat1.w;
					    u_xlat3.y = u_xlat1.w * 0.100000001;
					    u_xlat34 = u_xlat2.x * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat37;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat13.y + u_xlat13.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat14.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat14.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat14.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat14.xyz = u_xlat0.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat11.x = u_xlat11.y + u_xlat11.x;
					    u_xlat11.x = u_xlat13.z * u_xlat14.z + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat11.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat11.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat11.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat11.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat13.z * u_xlat3.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat13.y * u_xlat33;
					    u_xlat5.xyz = u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat34;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat18.yz = u_xlat4.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat24 = u_xlat6.x * u_xlat8.y;
					    u_xlat24 = u_xlat6.y * u_xlat24;
					    u_xlat34 = u_xlat24 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat18.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat5.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat13.x = u_xlat6.x * u_xlat3.y;
					    u_xlat13.x = u_xlat0.y * u_xlat13.x;
					    u_xlat34 = u_xlat13.x * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat4.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat5.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat13.x = u_xlat6.x * u_xlat3.y;
					    u_xlat13.x = u_xlat6.y * u_xlat13.x;
					    u_xlat33 = u_xlat13.x * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat24;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat11.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat11.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat13.z * u_xlat3.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat13.y * u_xlat33;
					    u_xlat5.xyz = u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat34;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat18.yz = u_xlat4.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat24 = u_xlat6.x * u_xlat8.y;
					    u_xlat24 = u_xlat6.y * u_xlat24;
					    u_xlat34 = u_xlat24 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat18.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat5.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat13.x = u_xlat6.x * u_xlat3.y;
					    u_xlat13.x = u_xlat0.y * u_xlat13.x;
					    u_xlat34 = u_xlat13.x * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat4.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat5.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat13.x = u_xlat6.x * u_xlat3.y;
					    u_xlat13.x = u_xlat6.y * u_xlat13.x;
					    u_xlat33 = u_xlat13.x * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat34 = u_xlat0.x * u_xlat6.y;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat6.y;
					    u_xlat34 = u_xlat6.z * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat8.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat33 = u_xlat0.x * u_xlat4.y;
					    u_xlat33 = u_xlat0.y * u_xlat33;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat0.y * u_xlat35;
					    u_xlat34 = u_xlat35 * u_xlat6.z + u_xlat34;
					    u_xlat33 = u_xlat33 * u_xlat6.z + u_xlat34;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat34 = u_xlat0.x * u_xlat4.y;
					    u_xlat34 = u_xlat6.y * u_xlat34;
					    u_xlat35 = u_xlat6.x * u_xlat3.y;
					    u_xlat35 = u_xlat6.y * u_xlat35;
					    u_xlat33 = u_xlat35 * u_xlat0.z + u_xlat33;
					    u_xlat33 = u_xlat34 * u_xlat0.z + u_xlat33;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.x = u_xlat0.x * u_xlat4.y;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat34 = u_xlat6.x * u_xlat3.y;
					    u_xlat11.x = u_xlat0.y * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat0.z + u_xlat33;
					    u_xlat0.x = u_xlat0.x * u_xlat0.z + u_xlat11.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_22[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_27[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_30[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat36 = u_xlat3.x * u_xlat6.y;
					    u_xlat36 = u_xlat3.y * u_xlat36;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.x = u_xlat13.x * u_xlat7.y;
					    u_xlat11.x = u_xlat3.y * u_xlat11.x;
					    u_xlat11.x = u_xlat3.z * u_xlat11.x;
					    u_xlat11.x = u_xlat36 * u_xlat3.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat22;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat22;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.x = u_xlat13.x * u_xlat6.y;
					    u_xlat0.z = u_xlat3.x * u_xlat4.y;
					    u_xlat0.xz = u_xlat13.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat3.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat3.z + u_xlat11.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat11.x = u_xlat13.x * u_xlat6.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat11.x = u_xlat13.x * u_xlat5.y;
					    u_xlat11.y = u_xlat3.x * u_xlat4.y;
					    u_xlat11.xy = u_xlat13.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat13.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat13.z + u_xlat0.x;
					    u_xlat11.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat11.x = u_xlat2.x * u_xlat11.x + _CliffParams.x;
					    u_xlat22 = (-u_xlat11.x) + 0.400000006;
					    u_xlat0.x = u_xlat0.x * u_xlat22 + u_xlat11.x;
					    u_xlat0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17[3];
						vec4 _LongshipColor;
						vec4 unused_0_19[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_23[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_28[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_31[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat35 = u_xlat4.x * u_xlat7.y;
					    u_xlat35 = u_xlat4.y * u_xlat35;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.x = u_xlat3.x * u_xlat8.y;
					    u_xlat11.x = u_xlat4.y * u_xlat11.x;
					    u_xlat11.x = u_xlat4.z * u_xlat11.x;
					    u_xlat11.x = u_xlat35 * u_xlat4.z + u_xlat11.x;
					    u_xlat22 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat22;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat22;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.x = u_xlat3.x * u_xlat7.y;
					    u_xlat0.z = u_xlat4.x * u_xlat5.y;
					    u_xlat0.xz = u_xlat3.yy * u_xlat0.xz;
					    u_xlat11.x = u_xlat0.z * u_xlat4.z + u_xlat11.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.z + u_xlat11.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat11.x = u_xlat3.x * u_xlat7.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat11.x = u_xlat3.x * u_xlat6.y;
					    u_xlat11.y = u_xlat4.x * u_xlat5.y;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat0.x = u_xlat11.y * u_xlat3.z + u_xlat0.x;
					    u_xlat0.x = u_xlat11.x * u_xlat3.z + u_xlat0.x;
					    u_xlat11.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = (-u_xlat11.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat21;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat11.xzy;
					    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat11.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat2.y * u_xlat33;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat35;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat35;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat13.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat13.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat13.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat13.zx, 0.0);
					    u_xlat4.w = u_xlat13.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat33 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat1.w;
					    u_xlat3.y = u_xlat1.w * 0.100000001;
					    u_xlat34 = u_xlat2.x * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat37;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat13.y + u_xlat13.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat14.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat14.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat14.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat14.xyz = u_xlat0.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat11.x = u_xlat11.y + u_xlat11.x;
					    u_xlat11.x = u_xlat13.z * u_xlat14.z + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat11.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat11.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat21;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat11.xzy;
					    u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat11.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat2.y * u_xlat33;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat35;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat35;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat13.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat13.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat13.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat13.zx, 0.0);
					    u_xlat4.w = u_xlat13.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat33 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat1.w;
					    u_xlat3.y = u_xlat1.w * 0.100000001;
					    u_xlat34 = u_xlat2.x * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat37;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat13.y + u_xlat13.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat14.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat14.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat14.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat14.xyz = u_xlat0.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat11.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat11.x = u_xlat11.y + u_xlat11.x;
					    u_xlat11.x = u_xlat13.z * u_xlat14.z + u_xlat11.x;
					    u_xlat11.x = u_xlat11.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat11.xyz = u_xlat2.xyz * u_xlat11.xxx + u_xlat1.xyz;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat11.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					float u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat10.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat10.xyz;
					    u_xlat1.xyw = unity_ObjectToWorld[3].xzy * in_POSITION0.www + u_xlat10.xzy;
					    u_xlat10.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = u_xlat10.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat10.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat0.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat0.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat0.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat1.xwy;
					    u_xlat2 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat0.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xwy;
					    u_xlat0.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat30 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat2.y * u_xlat30;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat32;
					    u_xlat6 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat12.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat6 = u_xlat0.xxxx * u_xlat6;
					    u_xlat8.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat8.yyyy;
					    u_xlat6 = u_xlat8.zzzz * u_xlat6;
					    u_xlat7 = u_xlat7 * u_xlat8.xxxx;
					    u_xlat7 = u_xlat8.yyyy * u_xlat7;
					    u_xlat6 = u_xlat7 * u_xlat8.zzzz + u_xlat6;
					    u_xlat30 = u_xlat30 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat12.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat4.xz, 0.0);
					    u_xlat5 = u_xlat0.xxxx * u_xlat5;
					    u_xlat5 = u_xlat0.yyyy * u_xlat5;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat8.zzzz + u_xlat6;
					    u_xlat3 = u_xlat5 * u_xlat8.zzzz + u_xlat3;
					    u_xlat5 = textureLod(_NormalTex, u_xlat12.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat12.zx, 0.0);
					    u_xlat4.w = u_xlat12.x;
					    u_xlat2 = u_xlat0.xxxx * u_xlat6;
					    u_xlat2 = u_xlat8.yyyy * u_xlat2;
					    u_xlat5 = u_xlat8.xxxx * u_xlat5;
					    u_xlat5 = u_xlat8.yyyy * u_xlat5;
					    u_xlat3 = u_xlat5 * u_xlat0.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat0.zzzz + u_xlat3;
					    u_xlat3 = textureLod(_NormalTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat4.xw, 0.0);
					    u_xlat4 = u_xlat0.xxxx * u_xlat4;
					    u_xlat4 = u_xlat0.yyyy * u_xlat4;
					    u_xlat3 = u_xlat8.xxxx * u_xlat3;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat2 = u_xlat3 * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = u_xlat4 * u_xlat0.zzzz + u_xlat2;
					    u_xlat30 = u_xlat0.w * 0.400000006;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.x = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat2.xxx * in_NORMAL0.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.yzw);
					    u_xlat31 = (-u_xlat2.x) * 0.5 + u_xlat1.w;
					    u_xlat31 = u_xlat31 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat1.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat33;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat11 = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat1.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat12.y + u_xlat12.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat30 = u_xlat1.x * 0.600000024 + u_xlat30;
					    u_xlat1.x = u_xlat31;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat31 = (-u_xlat31);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat11 = max(u_xlat31, u_xlat1.x);
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat3.yzx;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(u_xlat11) + u_xlat4.xyz;
					    u_xlat1.xyz = vec3(u_xlat31) * u_xlat3.zxy + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.w = (-u_xlat0.x);
					    u_xlat4.xyz = u_xlat0.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat10.x = u_xlat10.y + u_xlat10.x;
					    u_xlat10.x = u_xlat12.z * u_xlat4.z + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x / u_xlat2.x;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat10.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat10.xyz;
					    u_xlat30 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat30 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzw + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xwy;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[25];
						vec3 _SunDir;
						vec4 unused_0_9[4];
						vec4 _SideSunColor;
						vec4 unused_0_11[2];
						float _Year;
						vec4 unused_0_13[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_17[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_25[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat12.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat12.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat34 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat35 = u_xlat1.y * u_xlat34;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat35;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat35;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat20.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat12.x = u_xlat34 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat12.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat12.x;
					    u_xlat20.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat5.w = u_xlat20.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat34 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat35 = inversesqrt(u_xlat35);
					    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.x = (-u_xlat2.w) * 0.5 + u_xlat0.w;
					    u_xlat3.y = u_xlat0.w * 0.100000001;
					    u_xlat33 = u_xlat2.x * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat37 = u_xlat0.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat37;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat37;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat11.x = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat11.x;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat11.x;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat2.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat5.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat15.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat2.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat13.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat0.x = u_xlat13.y + u_xlat13.x;
					    u_xlat0.x = u_xlat4.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat34;
					    u_xlat11.x = u_xlat33;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat22 = max(u_xlat33, u_xlat11.x);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat25.x = _Year;
					    u_xlat3.x = float(0.0);
					    u_xlat25.y = float(0.0);
					    u_xlat4 = textureLod(_GrassTex, u_xlat25.xy, 0.0);
					    u_xlat3 = textureLod(_CliffTex, u_xlat3.xy, 0.0);
					    u_xlat14.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat14.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat14.xyz;
					    u_xlat11.xyz = vec3(u_xlat33) * u_xlat4.zxy + u_xlat14.xyz;
					    u_xlat14.xyz = (-u_xlat11.xyz) + _SnowColor.xyz;
					    u_xlat11.xyz = vec3(_SnowAmount) * u_xlat14.xyz + u_xlat11.xyz;
					    u_xlat14.xyz = u_xlat11.xyz * _MinAmbientColor.xyz;
					    u_xlat11.xyz = (-_MinAmbientColor.xyz) * u_xlat11.xyz + _MaxAmbientColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.xyz + u_xlat14.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat14.xyz = u_xlat1.xyw;
					    u_xlat14.xyz = clamp(u_xlat14.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.xy = u_xlat13.xy * u_xlat14.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat13.z * u_xlat14.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat0.xyz = u_xlat12.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.x = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat1.x + 1.0;
					    u_xlat1.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat0.xyz;
					    u_xlat33 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat33 = u_xlat3.x * u_xlat33 + _CliffParams.x;
					    u_xlat1.xyz = vec3(u_xlat33) * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[25];
						vec3 _SunDir;
						vec4 unused_0_8[4];
						vec4 _SideSunColor;
						vec4 unused_0_10[2];
						float _Year;
						vec4 unused_0_12[3];
						vec4 _LongshipColor;
						vec4 unused_0_14[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_23[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_26[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat19;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					float u_xlat33;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat0.xzy + u_xlat1.xzy;
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    u_xlat11.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat11.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xwy + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat0.xyz = u_xlat0.xwy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat7.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat32;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8 = u_xlat2.xxxx * u_xlat8;
					    u_xlat8 = u_xlat3.yyyy * u_xlat8;
					    u_xlat8 = u_xlat3.zzzz * u_xlat8;
					    u_xlat6 = u_xlat6 * u_xlat3.zzzz + u_xlat8;
					    u_xlat11.x = u_xlat31 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat11.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat1 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat1 = u_xlat3.xxxx * u_xlat1;
					    u_xlat1 = u_xlat2.yyyy * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat3.zzzz + u_xlat6;
					    u_xlat1 = u_xlat4 * u_xlat3.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat3.xxxx * u_xlat4;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat1 = u_xlat4 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat6 * u_xlat2.zzzz + u_xlat1;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat3 = u_xlat3.xxxx * u_xlat4;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat1 = u_xlat3 * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = u_xlat5 * u_xlat2.zzzz + u_xlat1;
					    u_xlat31 = u_xlat1.w * 0.400000006;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat2.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat2.xyz);
					    u_xlat32 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat32 = inversesqrt(u_xlat32);
					    u_xlat2.xyz = vec3(u_xlat32) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyw = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat0.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.yzw);
					    u_xlat30 = (-u_xlat2.x) * 0.5 + u_xlat0.w;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat32 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat33 = u_xlat0.y * u_xlat32;
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat33;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat8.xyz = u_xlat2.xxx * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.yyy * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat3.zzz * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.zzz + u_xlat8.xyz;
					    u_xlat10.x = u_xlat32 * u_xlat7.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat10.x;
					    u_xlat5.x = u_xlat4.x * u_xlat7.x + u_xlat10.x;
					    u_xlat19.x = u_xlat4.y * u_xlat7.z;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat0.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat2.yyy * u_xlat0.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.zzz + u_xlat4.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x + u_xlat2.y;
					    u_xlat12.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat0.x = u_xlat12.y + u_xlat12.x;
					    u_xlat0.x = u_xlat3.z * u_xlat0.z + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.600000024 + u_xlat31;
					    u_xlat10.x = u_xlat30;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat20 = max(u_xlat30, u_xlat10.x);
					    u_xlat20 = (-u_xlat20) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat20) + u_xlat4.xyz;
					    u_xlat10.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat3.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat3.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-_LongshipColor.xyz);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.w = (-u_xlat1.x);
					    u_xlat4.xyz = u_xlat1.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat1.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1.xy = u_xlat12.xy * u_xlat4.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat12.z * u_xlat4.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat11.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat31 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat31 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + _LongshipColor.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat24;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat11.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat11.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat13.z * u_xlat3.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat13.y * u_xlat33;
					    u_xlat5.xyz = u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat34;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat18.yz = u_xlat4.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat24.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat24.xy = u_xlat24.xy * u_xlat6.yy;
					    u_xlat24.xy = u_xlat6.zz * u_xlat24.xy;
					    u_xlat25.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat24.xy = u_xlat25.xy * u_xlat6.zz + u_xlat24.xy;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat18.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat13.xy = u_xlat3.xy * u_xlat6.zz + u_xlat24.xy;
					    u_xlat13.xy = u_xlat3.zw * u_xlat6.zz + u_xlat13.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat4.w = u_xlat18.x;
					    u_xlat3.zw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat3 = u_xlat6.xxyy * u_xlat3;
					    u_xlat3.xy = u_xlat6.yy * u_xlat3.xy;
					    u_xlat13.xy = u_xlat3.xy * u_xlat0.zz + u_xlat13.xy;
					    u_xlat13.xy = u_xlat3.zw * u_xlat0.zz + u_xlat13.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat4.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat0.yy * u_xlat3.xy;
					    u_xlat13.xy = u_xlat3.xy * u_xlat0.zz + u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat13.xy;
					    u_xlat22 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22 = u_xlat2.x * u_xlat22 + _CliffParams.x;
					    u_xlat33 = (-u_xlat22) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat24;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat11.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat2.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xyw = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat11.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat13.z * u_xlat3.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat13.y * u_xlat33;
					    u_xlat5.xyz = u_xlat13.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat34;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat18.yz = u_xlat4.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat24.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat24.xy = u_xlat24.xy * u_xlat6.yy;
					    u_xlat24.xy = u_xlat6.zz * u_xlat24.xy;
					    u_xlat25.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat24.xy = u_xlat25.xy * u_xlat6.zz + u_xlat24.xy;
					    u_xlat33 = u_xlat33 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat13.x + u_xlat33;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat33;
					    u_xlat18.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat13.xy = u_xlat3.xy * u_xlat6.zz + u_xlat24.xy;
					    u_xlat13.xy = u_xlat3.zw * u_xlat6.zz + u_xlat13.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat4.w = u_xlat18.x;
					    u_xlat3.zw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat3 = u_xlat6.xxyy * u_xlat3;
					    u_xlat3.xy = u_xlat6.yy * u_xlat3.xy;
					    u_xlat13.xy = u_xlat3.xy * u_xlat0.zz + u_xlat13.xy;
					    u_xlat13.xy = u_xlat3.zw * u_xlat0.zz + u_xlat13.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat4.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat0.yy * u_xlat3.xy;
					    u_xlat13.xy = u_xlat3.xy * u_xlat0.zz + u_xlat13.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat13.xy;
					    u_xlat22 = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22 = u_xlat2.x * u_xlat22 + _CliffParams.x;
					    u_xlat33 = (-u_xlat22) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat18;
					vec3 u_xlat21;
					float u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.x = _FogMaxRad + (-_FogMinRad);
					    u_xlat11.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat11.xyz;
					    u_xlat11.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat11.xyz;
					    u_xlat1.x = dot(u_xlat11.xz, u_xlat11.xz);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat1.x / u_xlat0.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat11.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.w = u_xlat11.y;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat2.xyz);
					    u_xlat2.xyz = fract(u_xlat2.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat0.x = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat3.y * u_xlat0.x;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat9.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat9.yyyy;
					    u_xlat6 = u_xlat9.zzzz * u_xlat6;
					    u_xlat8 = u_xlat8 * u_xlat9.xxxx;
					    u_xlat8 = u_xlat9.yyyy * u_xlat8;
					    u_xlat6 = u_xlat8 * u_xlat9.zzzz + u_xlat6;
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat0.x;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat0.x;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_NormalTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.xz, 0.0);
					    u_xlat4 = u_xlat2.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat9.xxxx * u_xlat3;
					    u_xlat3 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat9.zzzz + u_xlat6;
					    u_xlat3 = u_xlat4 * u_xlat9.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6 = u_xlat2.xxxx * u_xlat6;
					    u_xlat6 = u_xlat9.yyyy * u_xlat6;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat9.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat3 = u_xlat6 * u_xlat2.zzzz + u_xlat3;
					    u_xlat4 = textureLod(_NormalTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat5.xw, 0.0);
					    u_xlat5 = u_xlat2.xxxx * u_xlat5;
					    u_xlat5 = u_xlat2.yyyy * u_xlat5;
					    u_xlat4 = u_xlat9.xxxx * u_xlat4;
					    u_xlat4 = u_xlat2.yyyy * u_xlat4;
					    u_xlat3 = u_xlat4 * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat2.zzzz + u_xlat3;
					    u_xlat0.x = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat34 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * in_NORMAL0.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat11.y;
					    u_xlat11.xyz = u_xlat11.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat0.x = u_xlat1.x * 0.600000024 + u_xlat0.x;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = u_xlat0.xxx * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) * u_xlat34 + 1.0;
					    u_xlat3.xyz = u_xlat0.xxx * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat11.xz, _LevelRect.xy);
					    u_xlat11.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat11.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = fract(u_xlat0.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat3.y * u_xlat33;
					    u_xlat14.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat34;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat34;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat0.xx * u_xlat6.xy;
					    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat26.xy = u_xlat26.xy * u_xlat6.yy;
					    u_xlat26.xy = u_xlat6.zz * u_xlat26.xy;
					    u_xlat8.xy = u_xlat6.xx * u_xlat8.xy;
					    u_xlat8.xy = u_xlat6.yy * u_xlat8.xy;
					    u_xlat26.xy = u_xlat8.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat33 = u_xlat33 * u_xlat14.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat14.x + u_xlat33;
					    u_xlat18.x = u_xlat14.z * u_xlat4.y;
					    u_xlat3 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat3.zw = u_xlat0.xx * u_xlat8.xy;
					    u_xlat3.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat0.yyyy * u_xlat3;
					    u_xlat3.xy = u_xlat3.xy * u_xlat6.zz + u_xlat26.xy;
					    u_xlat3.xy = u_xlat3.zw * u_xlat6.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat18.yx, 0.0);
					    u_xlat8 = textureLod(_PaintTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat25.xy = u_xlat0.xx * u_xlat8.xy;
					    u_xlat25.xy = u_xlat6.yy * u_xlat25.xy;
					    u_xlat4.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat6.yy * u_xlat4.xy;
					    u_xlat3.xy = u_xlat4.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat0.xw = u_xlat0.xx * u_xlat5.xy;
					    u_xlat0.xw = u_xlat0.yy * u_xlat0.xw;
					    u_xlat25.xy = u_xlat6.xx * u_xlat4.xy;
					    u_xlat25.xy = u_xlat0.yy * u_xlat25.xy;
					    u_xlat3.xy = u_xlat25.xy * u_xlat0.zz + u_xlat3.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat0.zz + u_xlat3.xy;
					    u_xlat22 = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.y = unity_MatrixV[1].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat4.xyz = u_xlat1.yzx * (-u_xlat3.zxy);
					    u_xlat1.xyz = (-u_xlat3.yzx) * u_xlat1.zxy + (-u_xlat4.xyz);
					    u_xlat33 = dot((-u_xlat1.xyz), (-u_xlat1.xyz));
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * (-u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = u_xlat2.xyz * in_TEXCOORD1.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25;
						float _CameraUpScale;
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_31[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_34[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat2.x = unity_MatrixV[0].z;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat2.z = unity_MatrixV[2].z;
					    u_xlat3.xyz = u_xlat0.yzx * (-u_xlat2.zxy);
					    u_xlat0.xyz = (-u_xlat2.yzx) * u_xlat0.zxy + (-u_xlat3.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = in_TEXCOORD1.xxx * (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat0.w = u_xlat0.y * _CameraUpScale;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) * in_TANGENT0.www;
					    u_xlat1.xyz = (-u_xlat3.xyz) * vec3(0.300000012, 0.300000012, 0.300000012) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xwz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = (-u_xlat2.xyz) * vec3(-0.100000001, -0.100000001, -0.100000001) + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3;
						vec4 _CliffParams;
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_7[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_12[19];
						vec3 _SunDir;
						vec4 unused_0_14[4];
						vec4 _SideSunColor;
						vec4 unused_0_16[2];
						float _Year;
						vec4 unused_0_18;
						vec4 _BloodColor;
						vec4 unused_0_20[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_24[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_29[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_32[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat25;
					vec2 u_xlat26;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat34 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat26.x = _Year;
					    u_xlat4.x = float(0.0);
					    u_xlat26.y = float(0.0);
					    u_xlat5 = textureLod(_GrassTex, u_xlat26.xy, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat5.yzx;
					    u_xlat1.xyz = u_xlat5.xyz * vec3(u_xlat12) + u_xlat6.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat5.zxy + u_xlat1.xyz;
					    u_xlat5.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat1.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat1.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat4.y = u_xlat0.y * 0.100000001;
					    u_xlat2 = textureLod(_CliffTex, u_xlat4.xy, 0.0);
					    u_xlat13.xy = max(u_xlat0.xw, _LevelRect.xy);
					    u_xlat0.xw = min(u_xlat13.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xzw, vec3(0.5, 0.5, 0.5));
					    u_xlat13.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat13.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat13.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat3.xyz = (-u_xlat13.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat34;
					    u_xlat5.z = u_xlat0.z * u_xlat4.y;
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat26.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat26.xy = u_xlat3.yy * u_xlat26.xy;
					    u_xlat6.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat34;
					    u_xlat7 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat19.yz = u_xlat5.yx;
					    u_xlat11.xy = u_xlat13.xx * u_xlat7.xy;
					    u_xlat11.xy = u_xlat3.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat3.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat26.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat0.x + u_xlat33;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat33;
					    u_xlat19.x = u_xlat4.y * u_xlat6.z;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yz, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat5.xz, 0.0);
					    u_xlat0.xw = u_xlat13.xx * u_xlat6.xy;
					    u_xlat0.xw = u_xlat13.yy * u_xlat0.xw;
					    u_xlat4.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat4.xy = u_xlat13.yy * u_xlat4.xy;
					    u_xlat11.xy = u_xlat4.xy * u_xlat3.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat3.zz + u_xlat11.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat19.yx, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat19.zx, 0.0);
					    u_xlat5.w = u_xlat19.x;
					    u_xlat22.xy = u_xlat13.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat25.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat14.xy = u_xlat3.yy * u_xlat25.xy;
					    u_xlat0.xy = u_xlat14.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat4 = textureLod(_PaintTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat5.xw, 0.0);
					    u_xlat22.xy = u_xlat13.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat13.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat3.xx * u_xlat4.xy;
					    u_xlat13.xy = u_xlat13.yy * u_xlat3.xy;
					    u_xlat0.xy = u_xlat13.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat13.zz + u_xlat0.xy;
					    u_xlat22.x = (-_CliffParams.x) + _CliffParams.y;
					    u_xlat22.x = u_xlat2.x * u_xlat22.x + _CliffParams.x;
					    u_xlat33 = (-u_xlat22.x) + 0.400000006;
					    u_xlat11.x = u_xlat0.y * u_xlat33 + u_xlat22.x;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat11.xxx * _BloodColor.xyz + (-u_xlat11.xxx);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat11.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[2];
						vec2 _NormalTexSize;
						vec3 _NormalTexVolume;
						vec4 unused_0_6[2];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_11[19];
						vec3 _SunDir;
						vec4 unused_0_13[4];
						vec4 _SideSunColor;
						vec4 unused_0_15[2];
						float _Year;
						vec4 unused_0_17;
						vec4 _BloodColor;
						vec4 unused_0_19;
						vec4 _LongshipColor;
						vec4 unused_0_21[3];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_25[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_30[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_33[2];
						vec4 _MainTex_ST;
						vec4 _Color;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _NormalTex;
					uniform  sampler2D _PaintTex;
					uniform  sampler2D _AoTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec2 vs_TEXCOORD0;
					out float vs_TEXCOORD1;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat11;
					float u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat15;
					vec3 u_xlat20;
					vec3 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat26;
					vec2 u_xlat27;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_TEXCOORD1.yyy;
					    u_xlat1.xyz = in_NORMAL0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * in_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat33 = u_xlat33 + (-_FogMinRad);
					    u_xlat1.x = _FogMaxRad + (-_FogMinRad);
					    vs_TEXCOORD1 = u_xlat33 / u_xlat1.x;
					    vs_TEXCOORD1 = clamp(vs_TEXCOORD1, 0.0, 1.0);
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.x = unity_MatrixV[0].z * -0.100000001;
					    u_xlat1.y = unity_MatrixV[1].z * -0.100000001;
					    u_xlat1.z = unity_MatrixV[2].z * -0.100000001;
					    u_xlat1.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.w = u_xlat0.y;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat1.xwz + vec3(-0.5, 0.5, -0.5);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _NormalTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = min(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat2.xyz);
					    u_xlat2.xyz = floor(u_xlat2.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _NormalTexVolume.x / _NormalTexSize.x;
					    u_xlat34 = u_xlat2.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / _NormalTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat34;
					    u_xlat6.z = u_xlat2.z * u_xlat5.y;
					    u_xlat7 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat7 = u_xlat4.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat13.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat34;
					    u_xlat8 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat8 = u_xlat3.xxxx * u_xlat8;
					    u_xlat8 = u_xlat4.yyyy * u_xlat8;
					    u_xlat8 = u_xlat4.zzzz * u_xlat8;
					    u_xlat7 = u_xlat7 * u_xlat4.zzzz + u_xlat8;
					    u_xlat33 = u_xlat33 * u_xlat13.y;
					    u_xlat6.y = u_xlat5.x * u_xlat2.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat13.x + u_xlat33;
					    u_xlat20.x = u_xlat13.z * u_xlat5.y;
					    u_xlat2 = textureLod(_NormalTex, u_xlat6.yz, 0.0);
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.xz, 0.0);
					    u_xlat5 = u_xlat3.xxxx * u_xlat5;
					    u_xlat5 = u_xlat3.yyyy * u_xlat5;
					    u_xlat2 = u_xlat4.xxxx * u_xlat2;
					    u_xlat2 = u_xlat3.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat4.zzzz + u_xlat7;
					    u_xlat2 = u_xlat5 * u_xlat4.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_NormalTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat7 = u_xlat3.xxxx * u_xlat7;
					    u_xlat7 = u_xlat4.yyyy * u_xlat7;
					    u_xlat5 = u_xlat4.xxxx * u_xlat5;
					    u_xlat5 = u_xlat4.yyyy * u_xlat5;
					    u_xlat2 = u_xlat5 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat7 * u_xlat3.zzzz + u_xlat2;
					    u_xlat5 = textureLod(_NormalTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_NormalTex, u_xlat6.xw, 0.0);
					    u_xlat6 = u_xlat3.xxxx * u_xlat6;
					    u_xlat6 = u_xlat3.yyyy * u_xlat6;
					    u_xlat4 = u_xlat4.xxxx * u_xlat5;
					    u_xlat4 = u_xlat3.yyyy * u_xlat4;
					    u_xlat2 = u_xlat4 * u_xlat3.zzzz + u_xlat2;
					    u_xlat2 = u_xlat6 * u_xlat3.zzzz + u_xlat2;
					    u_xlat33 = u_xlat2.w * 0.400000006;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = in_NORMAL0.zxy * in_TANGENT0.yzx;
					    u_xlat3.xyz = in_NORMAL0.yzx * in_TANGENT0.zxy + (-u_xlat3.xyz);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyw = unity_ObjectToWorld[0].xyz * u_xlat3.xxx + u_xlat4.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * u_xlat3.zzz + u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat3.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.yxyz + vec4(-2.0, -0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.yzw);
					    u_xlat34 = (-u_xlat3.x) * 0.5 + u_xlat0.y;
					    u_xlat0.xyz = u_xlat0.xyz + _PaintTexOffset.xyz;
					    u_xlat34 = u_xlat34 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat35 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat36 = u_xlat1.y * u_xlat35;
					    u_xlat5.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat36;
					    u_xlat6.z = u_xlat1.z * u_xlat5.y;
					    u_xlat7 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat8.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat36;
					    u_xlat9 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat21.yz = u_xlat6.yx;
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.yyy * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.zzz * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat4.zzz + u_xlat9.xyz;
					    u_xlat12 = u_xlat35 * u_xlat8.y;
					    u_xlat6.y = u_xlat5.x * u_xlat1.x + u_xlat12;
					    u_xlat6.x = u_xlat5.x * u_xlat8.x + u_xlat12;
					    u_xlat21.x = u_xlat5.y * u_xlat8.z;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yz, 0.0);
					    u_xlat8 = textureLod(_AoTex, u_xlat6.xz, 0.0);
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat4.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat4.zzz + u_xlat5.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat21.yx, 0.0);
					    u_xlat7 = textureLod(_AoTex, u_xlat21.zx, 0.0);
					    u_xlat6.w = u_xlat21.x;
					    u_xlat7.xyz = u_xlat3.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat4.yyy * u_xlat7.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat15.xyz = u_xlat4.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat6.xw, 0.0);
					    u_xlat15.xyz = u_xlat3.xxx * u_xlat6.xyz;
					    u_xlat15.xyz = u_xlat3.yyy * u_xlat15.xyz;
					    u_xlat5.xyz = u_xlat4.xxx * u_xlat5.xyz;
					    u_xlat3.xyw = u_xlat3.yyy * u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat3.xyw * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat35 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat33 = u_xlat1.x * 0.600000024 + u_xlat33;
					    u_xlat1.x = u_xlat34;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat34 = (-u_xlat34);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat12 = max(u_xlat34, u_xlat1.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat4.yzx;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat12) + u_xlat5.xyz;
					    u_xlat1.xyz = vec3(u_xlat34) * u_xlat4.zxy + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + _SnowColor.xyz;
					    u_xlat1.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat1.xyz * _MinAmbientColor.xyz;
					    u_xlat5.xyz = (-_MinAmbientColor.xyz) * u_xlat1.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-_LongshipColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat33) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat5.xyz = vec3(u_xlat33) * u_xlat2.xyz;
					    u_xlat5.w = (-u_xlat5.x);
					    u_xlat2.xyz = u_xlat5.xyw;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat33 = dot(u_xlat5.xyz, _FlashDir.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat34 = u_xlat2.y + u_xlat2.x;
					    u_xlat34 = u_xlat3.z * u_xlat2.z + u_xlat34;
					    u_xlat34 = u_xlat34 / u_xlat35;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat34) + u_xlat4.xyz;
					    u_xlat34 = u_xlat33 * u_xlat33;
					    u_xlat33 = (-u_xlat33) * u_xlat34 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat33) * _FlashColor.xyz;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat3.xy = max(u_xlat0.xz, _LevelRect.xy);
					    u_xlat0.xz = min(u_xlat3.xy, _LevelRect.zw);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = fract(u_xlat0.xyz);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat33 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat34 = u_xlat0.y * u_xlat33;
					    u_xlat5.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat34;
					    u_xlat6.z = u_xlat0.z * u_xlat5.y;
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat27.xy = u_xlat4.xx * u_xlat7.xy;
					    u_xlat27.xy = u_xlat4.yy * u_xlat27.xy;
					    u_xlat7.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat34;
					    u_xlat8 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat20.yz = u_xlat6.yx;
					    u_xlat11.xy = u_xlat3.xx * u_xlat8.xy;
					    u_xlat11.xy = u_xlat4.yy * u_xlat11.xy;
					    u_xlat11.xy = u_xlat4.zz * u_xlat11.xy;
					    u_xlat11.xy = u_xlat27.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat33 = u_xlat33 * u_xlat7.y;
					    u_xlat6.y = u_xlat5.x * u_xlat0.x + u_xlat33;
					    u_xlat6.x = u_xlat5.x * u_xlat7.x + u_xlat33;
					    u_xlat20.x = u_xlat5.y * u_xlat7.z;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat6.xz, 0.0);
					    u_xlat0.xw = u_xlat3.xx * u_xlat7.xy;
					    u_xlat0.xw = u_xlat3.yy * u_xlat0.xw;
					    u_xlat5.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat5.xy = u_xlat3.yy * u_xlat5.xy;
					    u_xlat11.xy = u_xlat5.xy * u_xlat4.zz + u_xlat11.xy;
					    u_xlat0.xy = u_xlat0.xw * u_xlat4.zz + u_xlat11.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat20.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat20.zx, 0.0);
					    u_xlat6.w = u_xlat20.x;
					    u_xlat22.xy = u_xlat3.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat4.yy * u_xlat22.xy;
					    u_xlat26.xy = u_xlat4.xx * u_xlat5.xy;
					    u_xlat15.xy = u_xlat4.yy * u_xlat26.xy;
					    u_xlat0.xy = u_xlat15.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat5 = textureLod(_PaintTex, u_xlat6.yw, 0.0);
					    u_xlat6 = textureLod(_PaintTex, u_xlat6.xw, 0.0);
					    u_xlat22.xy = u_xlat3.xx * u_xlat6.xy;
					    u_xlat22.xy = u_xlat3.yy * u_xlat22.xy;
					    u_xlat3.xw = u_xlat4.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat3.yy * u_xlat3.xw;
					    u_xlat0.xy = u_xlat3.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat22.xy * u_xlat3.zz + u_xlat0.xy;
					    u_xlat22.x = in_COLOR0.w + in_COLOR0.w;
					    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat22.xxx * u_xlat1.xyz + _LongshipColor.xyz;
					    u_xlat3.xyz = (-u_xlat1.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat11.xyz = u_xlat0.yyy * u_xlat3.xyz + u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * 1.20000005 + -0.200000003;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat11.xyz * _BloodColor.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz;
					    vs_COLOR0.xyz = u_xlat0.xyz * _Color.xyz;
					    vs_COLOR0.w = 1.0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					Keywords { "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[62];
						vec4 _SelectionColor;
						vec4 unused_0_2[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[65];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8;
						vec4 _SelectionColor;
						vec4 unused_0_10[2];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					vec3 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.x = _SelectionColor.w * 0.300000012;
					    u_xlat3.xyz = (-u_xlat0.xyz) + _SelectionColor.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_NONE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_X" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Y" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_UP" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_CLIFF" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_PAINT_ON" "_COLOR_TREE" "_CINEMATIC_ON" "_AXIS_Z" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[40];
						vec4 _CloudCoverage;
						vec4 unused_0_4[7];
						vec4 _FogColor;
						vec4 unused_0_6;
						vec4 _FlashColor;
						vec4 unused_0_8[4];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  float vs_TEXCOORD1;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat0.w + -0.00999999978;
					    u_xlat0 = u_xlat0 * _Color;
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat6 = u_xlat0.w * vs_COLOR0.w;
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_TEXCOORD1;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}