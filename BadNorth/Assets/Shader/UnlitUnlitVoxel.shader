Shader "Unlit/UnlitVoxel" {
	Properties {
		_MainTex ("Main Texture", 2D) = "white" {}
		_TilingTex ("Blood Texture", 2D) = "white" {}
		_Color ("Color", Vector) = (0.5,0.5,0.5,1)
		_Stencil ("Stencil ID", Float) = 2
		[Toggle] _Mirror ("Mirror", Float) = 1
		[Toggle] _Outline ("Outline", Float) = 0
	}
	SubShader {
		LOD 100
		Tags { "RenderType" = "Opaque" }
		Pass {
			LOD 100
			Tags { "RenderType" = "Opaque" }
			Stencil {
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}
			GpuProgramID 771
			Program "vp" {
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].yxz * in_POSITION0.www + u_xlat0.yxz;
					    u_xlat1 = u_xlat0.xxxx * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.yyyy + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat2.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat2.x = u_xlat2.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat4 = (-u_xlat2.x) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * u_xlat4 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.y = unity_MatrixV[1].z;
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_3[2];
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_6[3];
						vec4 _MainTex_ST;
						vec4 unused_0_8[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat2.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat6 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = in_TANGENT0.y * 0.100000001 + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.600000024;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[56];
						float _WaterLevel;
						vec4 unused_0_2[7];
						vec4 _MainTex_ST;
						vec4 unused_0_4[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + unity_MatrixVP[3];
					    u_xlat0.x = (-in_NORMAL0.y) + in_TANGENT0.y;
					    u_xlat0.x = u_xlat0.x * 0.400000006 + in_NORMAL0.y;
					    u_xlat0.x = u_xlat0.x * 0.100000001 + 1.0;
					    vs_COLOR0.xyz = u_xlat0.xxx * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat0.x = (-unity_MatrixV[0].z);
					    u_xlat0.y = (-unity_MatrixV[1].z);
					    u_xlat0.z = (-unity_MatrixV[2].z);
					    u_xlat0.x = dot(u_xlat0.xyz, (-in_NORMAL0.xyz));
					    u_xlat0.x = u_xlat0.x * 3.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    vs_COLOR1.y = u_xlat2.x * u_xlat0.x;
					    vs_COLOR1.xzw = vec3(0.0, 0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb2.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
					    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat2.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat2.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19 = max(u_xlat27, u_xlat10.x);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat28 = u_xlat1.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat28 = u_xlat5.z * u_xlat28;
					    u_xlat21 = u_xlat5.x * u_xlat7.y;
					    u_xlat21 = u_xlat5.y * u_xlat21;
					    u_xlat28 = u_xlat21 * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat27 = u_xlat1.x * u_xlat3.y;
					    u_xlat27 = u_xlat1.y * u_xlat27;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat1.y * u_xlat2.x;
					    u_xlat28 = u_xlat2.x * u_xlat5.z + u_xlat28;
					    u_xlat27 = u_xlat27 * u_xlat5.z + u_xlat28;
					    u_xlat2 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat28 = u_xlat1.x * u_xlat3.y;
					    u_xlat28 = u_xlat5.y * u_xlat28;
					    u_xlat2.x = u_xlat5.x * u_xlat2.y;
					    u_xlat2.x = u_xlat5.y * u_xlat2.x;
					    u_xlat27 = u_xlat2.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat28 * u_xlat1.z + u_xlat27;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat28 = u_xlat5.x * u_xlat2.y;
					    u_xlat10.x = u_xlat1.y * u_xlat28;
					    u_xlat27 = u_xlat10.x * u_xlat1.z + u_xlat27;
					    u_xlat27 = u_xlat1.x * u_xlat1.z + u_xlat27;
					    u_xlat1.x = (-u_xlat27) + 1.0;
					    vs_TEXCOORD3.y = u_xlat27;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat10.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat28 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat28;
					    vs_COLOR1.y = u_xlat1.x * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat10.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					float u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23 = u_xlat2.x * u_xlat5.y;
					    u_xlat23 = u_xlat2.y * u_xlat23;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.x = u_xlat1.x * u_xlat6.y;
					    u_xlat20.x = u_xlat2.y * u_xlat20.x;
					    u_xlat20.x = u_xlat2.z * u_xlat20.x;
					    u_xlat20.x = u_xlat23 * u_xlat2.z + u_xlat20.x;
					    u_xlat30 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat30;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat30;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat10.x = u_xlat1.x * u_xlat5.y;
					    u_xlat10.z = u_xlat2.x * u_xlat3.y;
					    u_xlat10.xz = u_xlat1.yy * u_xlat10.xz;
					    u_xlat20.x = u_xlat10.z * u_xlat2.z + u_xlat20.x;
					    u_xlat10.x = u_xlat10.x * u_xlat2.z + u_xlat20.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat20.x = u_xlat1.x * u_xlat5.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat20.x = u_xlat1.x * u_xlat4.y;
					    u_xlat20.y = u_xlat2.x * u_xlat3.y;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat10.x = u_xlat20.y * u_xlat1.z + u_xlat10.x;
					    u_xlat10.x = u_xlat20.x * u_xlat1.z + u_xlat10.x;
					    u_xlat20.x = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11.x);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22 = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.x = u_xlat10.x * u_xlat5.y;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.x = u_xlat11.x * u_xlat5.y;
					    u_xlat11.y = u_xlat5.x * u_xlat7.y;
					    u_xlat11.xy = u_xlat5.zy * u_xlat11.xy;
					    u_xlat11.x = u_xlat11.y * u_xlat5.z + u_xlat11.x;
					    u_xlat21 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat21;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat21;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.x = u_xlat10.x * u_xlat4.y;
					    u_xlat1.z = u_xlat5.x * u_xlat2.y;
					    u_xlat1.xz = u_xlat10.yy * u_xlat1.xz;
					    u_xlat11.x = u_xlat1.z * u_xlat5.z + u_xlat11.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.z + u_xlat11.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat11.x = u_xlat10.x * u_xlat4.y;
					    u_xlat11.y = u_xlat5.x * u_xlat2.y;
					    u_xlat11.xy = u_xlat5.yy * u_xlat11.xy;
					    u_xlat1.x = u_xlat11.y * u_xlat10.z + u_xlat1.x;
					    u_xlat1.x = u_xlat11.x * u_xlat10.z + u_xlat1.x;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat10.x = u_xlat10.x * u_xlat3.y;
					    u_xlat10.x = u_xlat10.y * u_xlat10.x;
					    u_xlat11.x = u_xlat5.x * u_xlat2.y;
					    u_xlat20 = u_xlat10.y * u_xlat11.x;
					    u_xlat20 = u_xlat20 * u_xlat10.z + u_xlat1.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.z + u_xlat20;
					    u_xlat20 = (-u_xlat10.x) + 1.0;
					    vs_TEXCOORD3.y = u_xlat10.x;
					    u_xlat1.x = (-unity_MatrixV[0].z);
					    u_xlat1.y = (-unity_MatrixV[1].z);
					    u_xlat1.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat1.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat30 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat10.x = u_xlat30 * u_xlat10.x;
					    vs_COLOR1.y = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD3.x = 0.0;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[7];
						float _Year;
						vec4 unused_0_12[7];
						vec4 _SnowColor;
						vec4 unused_0_14;
						float _SnowAmount;
						vec4 unused_0_16[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_22[6];
						vec4 _MainTex_ST;
						vec4 unused_0_24[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					vec2 u_xlat9;
					bvec2 u_xlatb9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat15;
					vec2 u_xlat19;
					vec2 u_xlat20;
					vec2 u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat27 = _WaterLevel * 2.0 + (-u_xlat0.y);
					    u_xlat1 = vec4(u_xlat27) * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + in_TANGENT0.xyz;
					    u_xlat27 = u_xlat0.y;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat2.y = 1.0;
					    u_xlat2.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat2.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat27 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat27 = u_xlat27 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat28 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat29 = u_xlat2.y * u_xlat28;
					    u_xlat5.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat29;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat29;
					    u_xlat6 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat11.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat8.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat8.yyy;
					    u_xlat6.xyz = u_xlat8.zzz * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat8.xxx;
					    u_xlat7.xyz = u_xlat8.yyy * u_xlat7.xyz;
					    u_xlat6.xyz = u_xlat7.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat28 = u_xlat28 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat28;
					    u_xlat11.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat4.xz, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat8.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat8.zzz + u_xlat3.xyz;
					    u_xlat5 = textureLod(_AoTex, u_xlat11.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat11.zx, 0.0);
					    u_xlat4.w = u_xlat11.x;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = u_xlat8.yyy * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat8.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3 = textureLod(_AoTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat4.xw, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2.y = abs(_SunDir.y);
					    u_xlat2.xz = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat2.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat10.x = u_xlat27;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat19.x = max(u_xlat27, u_xlat10.x);
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat2.x = _Year;
					    u_xlat2.y = 0.0;
					    u_xlat2 = textureLod(_GrassTex, u_xlat2.xy, 0.0);
					    u_xlat3.xyz = u_xlat10.xxx * u_xlat2.yzx;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat19.xxx + u_xlat3.xyz;
					    u_xlat10.xyz = vec3(u_xlat27) * u_xlat2.zxy + u_xlat10.xyz;
					    u_xlat2.xyz = (-u_xlat10.xyz) + _SnowColor.xyz;
					    u_xlat10.xyz = vec3(_SnowAmount) * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat2.xyz = u_xlat10.xyz * _MinAmbientColor.xyz;
					    u_xlat10.xyz = (-_MinAmbientColor.xyz) * u_xlat10.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz + u_xlat2.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat2.xy = max(u_xlat1.xz, _LevelRect.xy);
					    u_xlat1.xz = min(u_xlat2.xy, _LevelRect.zw);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.z = u_xlat2.z * u_xlat3.y;
					    u_xlat27 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat28 = u_xlat2.y * u_xlat27;
					    u_xlat11.xyz = u_xlat2.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat28;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat28;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat15.yz = u_xlat4.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat21.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat21.xy = u_xlat21.xy * u_xlat5.yy;
					    u_xlat21.xy = u_xlat5.zz * u_xlat21.xy;
					    u_xlat7.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat7.xy = u_xlat5.yy * u_xlat7.xy;
					    u_xlat21.xy = u_xlat7.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat27 = u_xlat27 * u_xlat11.y;
					    u_xlat4.y = u_xlat3.x * u_xlat2.x + u_xlat27;
					    u_xlat4.x = u_xlat3.x * u_xlat11.x + u_xlat27;
					    u_xlat15.x = u_xlat11.z * u_xlat3.y;
					    u_xlat2 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat2.zw = u_xlat1.xx * u_xlat7.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2.xy = u_xlat2.xy * u_xlat5.zz + u_xlat21.xy;
					    u_xlat2.xy = u_xlat2.zw * u_xlat5.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat15.yx, 0.0);
					    u_xlat7 = textureLod(_PaintTex, u_xlat15.zx, 0.0);
					    u_xlat4.w = u_xlat15.x;
					    u_xlat20.xy = u_xlat1.xx * u_xlat7.xy;
					    u_xlat20.xy = u_xlat5.yy * u_xlat20.xy;
					    u_xlat3.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat5.yy * u_xlat3.xy;
					    u_xlat2.xy = u_xlat3.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat20.xy = u_xlat5.xx * u_xlat3.xy;
					    u_xlat20.xy = u_xlat1.yy * u_xlat20.xy;
					    u_xlat2.xy = u_xlat20.xy * u_xlat1.zz + u_xlat2.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat1.zz + u_xlat2.xy;
					    u_xlat19.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy;
					    u_xlat2.y = unity_MatrixV[1].z;
					    u_xlat3.x = unity_MatrixV[0].z;
					    u_xlat3.z = unity_MatrixV[2].z;
					    u_xlat2.xz = (-u_xlat3.xz);
					    u_xlat1.xy = u_xlat3.xz / unity_MatrixV[1].zz;
					    u_xlat27 = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat27 = u_xlat27 * 3.0;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat2.x;
					    u_xlat27 = u_xlat19.x * u_xlat27;
					    vs_COLOR1.y = u_xlat19.y * u_xlat27;
					    u_xlat9.x = u_xlat0.y + (-_WaterLevel);
					    u_xlat0.xy = u_xlat1.xy * u_xlat9.xx + u_xlat0.xz;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat9.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat9.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb9.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
					    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat9.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat9.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _LineWidth;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_25;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_28[3];
						vec4 _MainTex_ST;
						vec4 unused_0_30[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[6];
						vec4 _ScreenParams;
						vec4 unused_1_2;
						vec4 unity_OrthoParams;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_3_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					float u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat17;
					vec3 u_xlat18;
					vec2 u_xlat20;
					float u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat23;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.x = unity_OrthoParams.x / _ScreenParams.x;
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat10.x = _AAFactor + 1.0;
					    u_xlat0.x = u_xlat10.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LineWidth;
					    u_xlat10.xyz = in_TANGENT0.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz;
					    u_xlat30 = _FlashColor.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + in_POSITION0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyw = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat2 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat30 = (-u_xlat2.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = fract(u_xlat1.xyz);
					    u_xlat1.xyz = floor(u_xlat1.xyz);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat1.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat1.y * u_xlat31;
					    u_xlat6.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat32;
					    u_xlat7 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat18.yz = u_xlat5.yx;
					    u_xlat9 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat9.xyz = u_xlat3.xxx * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat3.yyy * u_xlat9.xyz;
					    u_xlat7.xyz = u_xlat2.xxx * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat3.zzz * u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat9.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat11 = u_xlat31 * u_xlat6.y;
					    u_xlat5.y = u_xlat4.x * u_xlat1.x + u_xlat11;
					    u_xlat5.x = u_xlat4.x * u_xlat6.x + u_xlat11;
					    u_xlat18.x = u_xlat4.y * u_xlat6.z;
					    u_xlat1 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat2.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat3.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.zzz + u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat3.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat18.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat18.zx, 0.0);
					    u_xlat5.w = u_xlat18.x;
					    u_xlat6.xyz = u_xlat2.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat3.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat13.xyz = u_xlat2.xxx * u_xlat5.xyz;
					    u_xlat13.xyz = u_xlat2.yyy * u_xlat13.xyz;
					    u_xlat4.xyz = u_xlat3.xxx * u_xlat4.xyz;
					    u_xlat2.xyw = u_xlat2.yyy * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyw * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat2.zzz + u_xlat1.xyz;
					    u_xlat2.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat2.xy = abs(_SunDir.yx);
					    u_xlat3.xyz = u_xlat2.zxw;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat2.x + u_xlat2.y;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat3.xyz;
					    u_xlat1.x = u_xlat2.y + u_xlat2.x;
					    u_xlat1.x = u_xlat3.z * u_xlat1.z + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + 0.200000003;
					    u_xlat11 = u_xlat30;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21 = max(u_xlat30, u_xlat11);
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat3.x = _Year;
					    u_xlat3.y = 0.0;
					    u_xlat3 = textureLod(_GrassTex, u_xlat3.xy, 0.0);
					    u_xlat4.xyz = vec3(u_xlat11) * u_xlat3.yzx;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat21) + u_xlat4.xyz;
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.zxy + u_xlat4.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + _SnowColor.xyz;
					    u_xlat3.xyz = vec3(_SnowAmount) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * _MinAmbientColor.xyz;
					    u_xlat3.xyz = (-_MinAmbientColor.xyz) * u_xlat3.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat30 = dot(in_TANGENT0.xyz, in_TANGENT0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xy = vec2(u_xlat30) * in_TANGENT0.xy;
					    u_xlat3.z = (-u_xlat3.x);
					    u_xlat3.xyz = u_xlat3.xyz;
					    u_xlat3.xyz = clamp(u_xlat3.xyz, 0.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
					    u_xlat30 = u_xlat2.y + u_xlat2.x;
					    u_xlat30 = u_xlat2.z * u_xlat3.z + u_xlat30;
					    u_xlat30 = u_xlat30 / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat30) + u_xlat1.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(4.0, 4.0, 4.0) + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = fract(u_xlat10.xyz);
					    u_xlat10.xyz = floor(u_xlat10.xyz);
					    u_xlat2.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat32 = u_xlat10.y * u_xlat31;
					    u_xlat3.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat32;
					    u_xlat4.z = u_xlat10.z * u_xlat3.y;
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat23.xy = u_xlat2.xx * u_xlat5.xy;
					    u_xlat23.xy = u_xlat2.yy * u_xlat23.xy;
					    u_xlat5.xyz = u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat32;
					    u_xlat6 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat17.yz = u_xlat4.yx;
					    u_xlat20.xy = u_xlat1.xx * u_xlat6.xy;
					    u_xlat20.xy = u_xlat2.yy * u_xlat20.xy;
					    u_xlat20.xy = u_xlat2.zz * u_xlat20.xy;
					    u_xlat20.xy = u_xlat23.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat31 = u_xlat31 * u_xlat5.y;
					    u_xlat4.y = u_xlat3.x * u_xlat10.x + u_xlat31;
					    u_xlat4.x = u_xlat3.x * u_xlat5.x + u_xlat31;
					    u_xlat17.x = u_xlat3.y * u_xlat5.z;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yz, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat4.xz, 0.0);
					    u_xlat3.zw = u_xlat1.xx * u_xlat5.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3 = u_xlat1.yyyy * u_xlat3;
					    u_xlat10.xy = u_xlat3.xy * u_xlat2.zz + u_xlat20.xy;
					    u_xlat10.xy = u_xlat3.zw * u_xlat2.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat17.yx, 0.0);
					    u_xlat5 = textureLod(_PaintTex, u_xlat17.zx, 0.0);
					    u_xlat4.w = u_xlat17.x;
					    u_xlat22.xy = u_xlat1.xx * u_xlat5.xy;
					    u_xlat22.xy = u_xlat2.yy * u_xlat22.xy;
					    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat3.xy = u_xlat2.yy * u_xlat3.xy;
					    u_xlat10.xy = u_xlat3.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat22.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat3 = textureLod(_PaintTex, u_xlat4.yw, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat4.xw, 0.0);
					    u_xlat1.xw = u_xlat1.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat1.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat2.xx * u_xlat3.xy;
					    u_xlat2.xy = u_xlat1.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat2.xy * u_xlat1.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat1.xw * u_xlat1.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20.x = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat20.x * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec2 _AoTexSize;
						vec3 _AoTexVolume;
						vec4 unused_0_3[6];
						vec2 _PaintTexSize;
						vec3 _PaintTexVolume;
						vec3 _PaintTexOffset;
						vec4 _LevelRect;
						vec4 unused_0_8[19];
						vec3 _SunDir;
						vec4 unused_0_10[4];
						vec4 _SideSunColor;
						vec4 unused_0_12[2];
						float _Year;
						vec4 unused_0_14[7];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_18[2];
						vec4 _MinAmbientColor;
						vec4 _MaxAmbientColor;
						float _WaterLevel;
						float _FogMaxRad;
						float _FogMinRad;
						vec4 unused_0_24[2];
						vec4 _FlashColor;
						vec3 _FlashDir;
						vec4 unused_0_27[2];
						vec4 _MainTex_ST;
						vec4 unused_0_29[4];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[7];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[4];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_4[2];
					};
					uniform  sampler2D _AoTex;
					uniform  sampler2D _GrassTex;
					uniform  sampler2D _PaintTex;
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec4 vs_COLOR1;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					bvec2 u_xlatb10;
					vec2 u_xlat11;
					vec3 u_xlat13;
					vec3 u_xlat16;
					vec3 u_xlat17;
					float u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat22;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + unity_MatrixVP[3];
					    u_xlat1.xz = _AoTexVolume.xz * vec2(0.5, 0.5);
					    u_xlat1.y = 1.0;
					    u_xlat1.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-in_NORMAL0.xyz) + in_TANGENT0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + in_NORMAL0.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006) + u_xlat1.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat3 = _AoTexVolume.xyzy + vec4(-0.5, -0.5, -0.5, -2.0);
					    u_xlat1.xyz = min(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat30 = (-u_xlat3.w) * 0.5 + u_xlat0.y;
					    u_xlat30 = u_xlat30 * 0.25;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = floor(u_xlat1.xyz);
					    u_xlat1.xyz = fract(u_xlat1.xyz);
					    u_xlat4.xy = vec2(1.0, 1.0) / _AoTexSize.xy;
					    u_xlat5.z = u_xlat3.z * u_xlat4.y;
					    u_xlat31 = _AoTexVolume.x / _AoTexSize.x;
					    u_xlat32 = u_xlat3.y * u_xlat31;
					    u_xlat13.xyz = u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat32;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat32;
					    u_xlat6 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat17.yz = u_xlat5.yx;
					    u_xlat8 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat9.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat9.yyy;
					    u_xlat6.xyz = u_xlat9.zzz * u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * u_xlat9.xxx;
					    u_xlat8.xyz = u_xlat9.yyy * u_xlat8.xyz;
					    u_xlat6.xyz = u_xlat8.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat31 = u_xlat31 * u_xlat13.y;
					    u_xlat5.y = u_xlat4.x * u_xlat3.x + u_xlat31;
					    u_xlat5.x = u_xlat4.x * u_xlat13.x + u_xlat31;
					    u_xlat17.x = u_xlat13.z * u_xlat4.y;
					    u_xlat3 = textureLod(_AoTex, u_xlat5.yz, 0.0);
					    u_xlat4 = textureLod(_AoTex, u_xlat5.xz, 0.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat9.xxx * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat9.zzz + u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat9.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat17.yx, 0.0);
					    u_xlat6 = textureLod(_AoTex, u_xlat17.zx, 0.0);
					    u_xlat5.w = u_xlat17.x;
					    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat9.yyy * u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat9.yyy * u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat4 = textureLod(_AoTex, u_xlat5.yw, 0.0);
					    u_xlat5 = textureLod(_AoTex, u_xlat5.xw, 0.0);
					    u_xlat5.xyz = u_xlat1.xxx * u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.yyy * u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.yyy * u_xlat4.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat3.zw = _SunDir.xx * vec2(1.0, -1.0);
					    u_xlat3.xy = abs(_SunDir.yx);
					    u_xlat4.xyz = u_xlat3.zxw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat31 = u_xlat3.x + u_xlat3.y;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat1.x = u_xlat3.y + u_xlat3.x;
					    u_xlat1.x = u_xlat4.z * u_xlat1.z + u_xlat1.x;
					    u_xlat11.x = in_TANGENT0.w * 0.400000006;
					    u_xlat1.x = u_xlat1.x * 0.600000024 + u_xlat11.x;
					    u_xlat11.x = u_xlat30;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat21.x = max(u_xlat30, u_xlat11.x);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat4.x = _Year;
					    u_xlat4.y = 0.0;
					    u_xlat4 = textureLod(_GrassTex, u_xlat4.xy, 0.0);
					    u_xlat5.xyz = u_xlat11.xxx * u_xlat4.yzx;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat21.xxx + u_xlat5.xyz;
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.zxy + u_xlat5.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + _SnowColor.xyz;
					    u_xlat4.xyz = vec3(_SnowAmount) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat5.xyz = u_xlat4.xyz * _MinAmbientColor.xyz;
					    u_xlat4.xyz = (-_MinAmbientColor.xyz) * u_xlat4.xyz + _MaxAmbientColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat5.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.w = (-u_xlat2.x);
					    u_xlat4.xyz = u_xlat2.xyw;
					    u_xlat4.xyz = clamp(u_xlat4.xyz, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat2.xyz, _FlashDir.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat2.xy = u_xlat3.xy * u_xlat4.xy;
					    u_xlat2.x = u_xlat2.y + u_xlat2.x;
					    u_xlat2.x = u_xlat3.z * u_xlat4.z + u_xlat2.x;
					    u_xlat31 = u_xlat2.x / u_xlat31;
					    u_xlat2.xyz = _SideSunColor.xyz * _CloudCoverage.zzz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat31 = u_xlat30 * u_xlat30;
					    u_xlat30 = (-u_xlat30) * u_xlat31 + 1.0;
					    u_xlat2.xyz = vec3(u_xlat30) * _FlashColor.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat1.xyz;
					    vs_COLOR0.xyz = u_xlat1.xyz * in_COLOR0.xyz;
					    vs_COLOR0.w = in_TANGENT0.w;
					    u_xlat1.xyz = in_TANGENT0.xyz * vec3(0.100000001, 0.100000001, 0.100000001) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + (-_FogMinRad);
					    u_xlat10.xyz = u_xlat1.xyz + _PaintTexOffset.xyz;
					    u_xlat1.xy = max(u_xlat10.xz, _LevelRect.xy);
					    u_xlat10.xz = min(u_xlat1.xy, _LevelRect.zw);
					    u_xlat10.xyz = max(u_xlat10.xyz, vec3(0.5, 0.5, 0.5));
					    u_xlat1.xyz = _PaintTexVolume.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat10.xyz = min(u_xlat10.xyz, u_xlat1.xyz);
					    u_xlat10.xyz = u_xlat10.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = floor(u_xlat10.xyz);
					    u_xlat10.xyz = fract(u_xlat10.xyz);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_PaintTexSize.x, _PaintTexSize.y);
					    u_xlat3.z = u_xlat1.z * u_xlat2.y;
					    u_xlat31 = _PaintTexVolume.x / _PaintTexSize.xxxy.z;
					    u_xlat22.x = u_xlat1.y * u_xlat31;
					    u_xlat4.xyz = u_xlat1.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat22.x;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat22.x;
					    u_xlat5 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat16.yz = u_xlat3.yx;
					    u_xlat7 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat11.xy = u_xlat10.xx * u_xlat5.xy;
					    u_xlat5.xyz = (-u_xlat10.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat11.xy = u_xlat11.xy * u_xlat5.yy;
					    u_xlat11.xy = u_xlat5.zz * u_xlat11.xy;
					    u_xlat22.xy = u_xlat5.xx * u_xlat7.xy;
					    u_xlat22.xy = u_xlat5.yy * u_xlat22.xy;
					    u_xlat11.xy = u_xlat22.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat31 = u_xlat31 * u_xlat4.y;
					    u_xlat3.y = u_xlat2.x * u_xlat1.x + u_xlat31;
					    u_xlat3.x = u_xlat2.x * u_xlat4.x + u_xlat31;
					    u_xlat16.x = u_xlat2.y * u_xlat4.z;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yz, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat3.xz, 0.0);
					    u_xlat1.xw = u_xlat10.xx * u_xlat4.xy;
					    u_xlat1.xw = u_xlat10.yy * u_xlat1.xw;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat11.xy = u_xlat2.xy * u_xlat5.zz + u_xlat11.xy;
					    u_xlat1.xy = u_xlat1.xw * u_xlat5.zz + u_xlat11.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat16.yx, 0.0);
					    u_xlat4 = textureLod(_PaintTex, u_xlat16.zx, 0.0);
					    u_xlat3.w = u_xlat16.x;
					    u_xlat21.xy = u_xlat10.xx * u_xlat4.xy;
					    u_xlat21.xy = u_xlat5.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat2.xy = u_xlat5.yy * u_xlat2.xy;
					    u_xlat1.xy = u_xlat2.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat21.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat2 = textureLod(_PaintTex, u_xlat3.yw, 0.0);
					    u_xlat3 = textureLod(_PaintTex, u_xlat3.xw, 0.0);
					    u_xlat21.xy = u_xlat10.xx * u_xlat3.xy;
					    u_xlat21.xy = u_xlat10.yy * u_xlat21.xy;
					    u_xlat2.xy = u_xlat5.xx * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.yy * u_xlat2.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat10.zz + u_xlat1.xy;
					    u_xlat10.xy = u_xlat21.xy * u_xlat10.zz + u_xlat10.xy;
					    u_xlat1.xy = (-u_xlat10.xy) + vec2(1.0, 1.0);
					    vs_TEXCOORD3.xy = u_xlat10.xy;
					    u_xlat2.x = (-unity_MatrixV[0].z);
					    u_xlat2.y = (-unity_MatrixV[1].z);
					    u_xlat2.z = (-unity_MatrixV[2].z);
					    u_xlat10.x = dot(u_xlat2.xyz, (-in_NORMAL0.xyz));
					    u_xlat10.x = u_xlat10.x * 3.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = in_TANGENT0.w * 3.0 + -1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat10.x = u_xlat1.x * u_xlat10.x;
					    vs_COLOR1.y = u_xlat1.y * u_xlat10.x;
					    u_xlat10.x = _FogMaxRad + (-_FogMinRad);
					    vs_COLOR1.x = u_xlat0.x / u_xlat10.x;
					    vs_COLOR1.x = clamp(vs_COLOR1.x, 0.0, 1.0);
					    vs_COLOR1.zw = vec2(0.0, 0.0);
					    u_xlat0.x = (-in_POSITION0.x) + in_POSITION0.z;
					    u_xlatb10.xy = greaterThanEqual(vec4(0.5, 0.5, 0.0, 0.0), abs(in_NORMAL0.zyzz)).xy;
					    u_xlat10.x = u_xlatb10.x ? float(1.0) : 0.0;
					    u_xlat10.y = u_xlatb10.y ? float(1.0) : 0.0;
					;
					    u_xlat1.xw = u_xlat10.xx * u_xlat0.xx + in_POSITION0.xx;
					    u_xlat1.yz = in_POSITION0.yy;
					    u_xlat1 = u_xlat1 + (-in_POSITION0.xzzx);
					    u_xlat0 = u_xlat10.yyyy * u_xlat1 + in_POSITION0.xzzx;
					    u_xlat0 = u_xlat0 * vec4(0.899999976, 0.899999976, -0.200000003, 0.200000003);
					    u_xlat0.xy = u_xlat0.zw + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = in_POSITION0.xz * vec2(0.200000003, 0.200000003) + in_TEXCOORD1.xy;
					    vs_TEXCOORD4.y = in_POSITION0.y + (-_WaterLevel);
					    vs_TEXCOORD4.x = 0.0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _LineWidth;
						vec4 unused_0_14[2];
						float _AAFactor;
						vec4 unused_0_16[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _LineWidth;
						vec4 unused_0_14[2];
						float _AAFactor;
						vec4 unused_0_16[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_16[2];
						float _AAFactor;
						vec4 unused_0_18[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_20;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_16[2];
						float _AAFactor;
						vec4 unused_0_18[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_20;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _LineWidth;
						vec4 unused_0_10[2];
						float _AAFactor;
						vec4 unused_0_12[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _LineWidth;
						vec4 unused_0_14[2];
						float _AAFactor;
						vec4 unused_0_16[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _LineWidth;
						vec4 unused_0_14[2];
						float _AAFactor;
						vec4 unused_0_16[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _LineWidth;
						vec4 unused_0_6[2];
						float _AAFactor;
						vec4 unused_0_8[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11[2];
						float _AAFactor;
						vec4 unused_0_13[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_15;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Year;
						vec4 unused_0_6;
						vec4 _BloodColor;
						vec4 unused_0_8[5];
						vec4 _SnowColor;
						vec4 unused_0_10;
						float _SnowAmount;
						vec4 unused_0_12[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15[2];
						float _AAFactor;
						vec4 unused_0_17[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_19;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_16[2];
						float _AAFactor;
						vec4 unused_0_18[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_20;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[35];
						float _Frost;
						float _Year;
						vec4 unused_0_7;
						vec4 _BloodColor;
						vec4 unused_0_9[5];
						vec4 _SnowColor;
						vec4 unused_0_11;
						float _SnowAmount;
						vec4 unused_0_13[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_16[2];
						float _AAFactor;
						vec4 unused_0_18[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_20;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    SV_Target0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[47];
						vec4 _MirrorColor2;
						vec4 unused_0_2[21];
					};
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = _MirrorColor2 * vec4(0.800000012, 0.800000012, 0.800000012, 0.5);
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[37];
						vec4 _BloodColor;
						vec4 unused_0_4[12];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_7[2];
						float _AAFactor;
						vec4 unused_0_9[7];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_11;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _LineWidth;
						vec4 unused_0_16;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_20[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _LineWidth;
						vec4 unused_0_16;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_20[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_18;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_22[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_24;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat18));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat18);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat18 = vs_COLOR1.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_18;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_22[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_24;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat18));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat18);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat18 = vs_COLOR1.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _LineWidth;
						vec4 unused_0_14;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_18[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _LineWidth;
						vec4 unused_0_16;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_20[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _LineWidth;
						vec4 unused_0_16;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_20[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat9;
					int u_xlati9;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.x = _AoTexVolume.y + -2.0;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat0.x = u_xlat0.x * 0.25;
					    u_xlat4.x = u_xlat0.x;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = max(u_xlat0.x, u_xlat4.x);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat4.xxx * u_xlat1.yzx;
					    u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat8) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.zxy + u_xlat4.xyz;
					    u_xlat12 = (-vs_COLOR0.w) + 1.0;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat1.x = u_xlat1.z + u_xlat1.z;
					    u_xlat9 = u_xlat1.y * u_xlat1.x;
					    u_xlat12 = u_xlat9 * 0.300000012 + u_xlat12;
					    u_xlat2 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9 = u_xlat2.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat12 = u_xlat9 * u_xlat12 + 1.0;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat12) + _SnowColor.xyz;
					    u_xlat12 = _SnowAmount * 2.0 + -1.0;
					    u_xlat12 = u_xlat2.x + u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati9);
					    u_xlat12 = float(u_xlati12);
					    u_xlat9 = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat2.xz = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.zzz;
					    u_xlat9 = (-u_xlat2.w) + 0.5;
					    u_xlat6 = u_xlat2.y + vs_TEXCOORD3.x;
					    u_xlatb6 = u_xlat6>=1.00999999;
					    u_xlat9 = u_xlat9 * 0.0199999996 + 1.0;
					    u_xlat9 = u_xlat9 * _CliffParams.w;
					    u_xlat3.xyz = min(vec3(u_xlat9), u_xlat3.xyz);
					    u_xlat9 = u_xlat2.x * u_xlat9;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-vec3(u_xlat9));
					    u_xlat2.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14 = (-u_xlat2.x) + 0.100000001;
					    u_xlat1.x = u_xlat1.x * u_xlat14 + u_xlat2.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat1.y;
					    u_xlatb5 = u_xlat1.y==0.0;
					    u_xlat2.x = dFdx(u_xlat1.x);
					    u_xlat14 = dFdy(u_xlat1.x);
					    u_xlat2.x = abs(u_xlat14) + abs(u_xlat2.x);
					    u_xlat2.x = min(u_xlat2.x, 1.0);
					    u_xlat1.x = u_xlat1.x / u_xlat2.x;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = (u_xlatb5) ? -10.0 : u_xlat1.x;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat13;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat5 = u_xlat12 * 0.699999988 + u_xlat1.x;
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = vec3(u_xlat5) * u_xlat3.xyz + vec3(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.zzz + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb6) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat8;
					vec2 u_xlat9;
					float u_xlat11;
					float u_xlat12;
					int u_xlati12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat8.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat8.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat8.xy);
					    u_xlat9.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat9.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat4.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat4.x = sqrt(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x / _LineWidth;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat8.xy = u_xlat8.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat8.xy = cos(u_xlat8.xy);
					    u_xlat8.x = u_xlat8.y + u_xlat8.x;
					    u_xlat12 = _Frost * _SnowAmount;
					    u_xlat8.x = u_xlat8.x * 0.5 + u_xlat12;
					    u_xlat8.x = u_xlat8.x + -1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat4.x = u_xlat4.x * u_xlat8.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat8.x = u_xlat4.x;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat12 = max(u_xlat4.x, u_xlat8.x);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.x = _Year;
					    u_xlat1.y = 0.0;
					    u_xlat1 = textureLod(_GrassTex, u_xlat1.xy, 0.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat1.yzx;
					    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.zxy + u_xlat2.xyz;
					    u_xlat1.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat5 = u_xlat2.z + u_xlat2.z;
					    u_xlat9.x = u_xlat2.y * u_xlat5;
					    u_xlat1.x = u_xlat9.x * 0.300000012 + u_xlat1.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat9.x = u_xlat3.w + -0.5;
					    u_xlat9.x = u_xlat9.x * 0.25;
					    u_xlat1.x = u_xlat9.x * u_xlat1.x + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + _SnowColor.xyz;
					    u_xlat1.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat3.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat4.xyz;
					    u_xlat1.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat12 = vs_TEXCOORD3.y;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlati12 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati12 = u_xlati12 + (-u_xlati1);
					    u_xlat12 = float(u_xlati12);
					    u_xlat1.x = u_xlat12 * vs_TEXCOORD4.y;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-05);
					    u_xlat1.x = vs_TEXCOORD4.y / u_xlat1.x;
					    u_xlat9.x = _AAFactor + 1.0;
					    u_xlat1.x = (-u_xlat9.x) * _LineWidth + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xw = u_xlat1.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.www;
					    u_xlat3.x = (-u_xlat3.w) + 0.5;
					    u_xlat7 = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb7 = u_xlat7>=1.00999999;
					    u_xlat3.x = u_xlat3.x * 0.0199999996 + 1.0;
					    u_xlat3.x = u_xlat3.x * _CliffParams.w;
					    u_xlat2.xzw = min(u_xlat2.xzw, u_xlat3.xxx);
					    u_xlat1.x = u_xlat1.x * u_xlat3.x;
					    u_xlat2.xzw = u_xlat2.xzw * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat3.x = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat11 = (-u_xlat3.x) + 0.100000001;
					    u_xlat5 = u_xlat5 * u_xlat11 + u_xlat3.x;
					    u_xlat5 = (-u_xlat5) + u_xlat2.y;
					    u_xlatb6 = u_xlat2.y==0.0;
					    u_xlat3.x = dFdx(u_xlat5);
					    u_xlat11 = dFdy(u_xlat5);
					    u_xlat3.x = abs(u_xlat11) + abs(u_xlat3.x);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat5 = u_xlat5 / u_xlat3.x;
					    u_xlat12 = u_xlat12 * u_xlat5;
					    u_xlat5 = (u_xlatb6) ? -10.0 : u_xlat5;
					    u_xlat12 = dFdy(u_xlat12);
					    u_xlat12 = max(u_xlat12, -1.0);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat12 = u_xlat12 * _LineWidth;
					    u_xlat9.x = u_xlat12 * 0.699999988 + u_xlat5;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) * 0.699999988 + u_xlat5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xzw + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.www + (-u_xlat1.xyz);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb7) ? -1.0 : -0.0;
					    u_xlat13 = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat13;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					float u_xlat4;
					int u_xlati4;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat0.x = u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlatb2 = u_xlat0.y>=1.00999999;
					    u_xlat4 = (u_xlatb2) ? -1.0 : -0.0;
					    u_xlat2 = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat4 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.800000012 + u_xlat2;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat4) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat1.xyz = vec3(u_xlat2) * _BloodColor.xyz + (-vec3(u_xlat2));
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + vec3(u_xlat2);
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _LineWidth;
						vec4 unused_0_10;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_14[8];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					void main()
					{
					    u_xlati0 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati0 = u_xlati0 + (-u_xlati2);
					    u_xlat0.x = float(u_xlati0);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y;
					    u_xlat0.x = dFdy(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
					    u_xlat0.x = vs_TEXCOORD4.y / u_xlat0.x;
					    u_xlat2 = _AAFactor + 1.0;
					    u_xlat0.x = (-u_xlat2) * _LineWidth + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.100000024 + 0.899999976;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat2 = u_xlat2 * _CliffParams.w;
					    u_xlat0.x = u_xlat0.x * u_xlat2;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[6];
						vec4 _CloudCoverage;
						vec4 unused_0_12[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_15;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_19[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_21;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					float u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat1.x = u_xlat4.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat9 = max(u_xlat4.x, u_xlat1.x);
					    u_xlat9 = (-u_xlat9) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat2 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat3.xyz = u_xlat1.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat9) + u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat1.x = u_xlat1.w + -0.5;
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat1.x = u_xlat1.x * 0.25;
					    u_xlat9 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat13 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat13;
					    u_xlat9 = u_xlat2.x * 0.300000012 + u_xlat9;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
					    u_xlat2.xzw = u_xlat4.xyz * u_xlat1.xxx;
					    u_xlat4.xyz = (-u_xlat4.xyz) * u_xlat1.xxx + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.x = vs_TEXCOORD3.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat2.xzw;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat2.x) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat13 * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb13 = u_xlat2.y==0.0;
					    u_xlat6 = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6 = abs(u_xlat10.x) + abs(u_xlat6);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb13) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Year;
						vec4 unused_0_8;
						vec4 _BloodColor;
						vec4 unused_0_10[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_14[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_17;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_21[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_23;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec3 u_xlat6;
					vec2 u_xlat8;
					float u_xlat9;
					int u_xlati9;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat1.x = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat5 = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat5);
					    u_xlat1.x = u_xlat1.x * 4.0;
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat0.x = float(0.0);
					    u_xlat8.y = float(0.0);
					    u_xlat2 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat2.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat1.x;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = (-u_xlat1.w) + 0.5;
					    u_xlat4.x = u_xlat4.x * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat4.x = _AoTexVolume.y + -2.0;
					    u_xlat4.x = (-u_xlat4.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat4.x = u_xlat4.x * 0.25;
					    u_xlat9 = u_xlat4.x;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat2.x = max(u_xlat4.x, u_xlat9);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat8.x = _Year;
					    u_xlat3 = textureLod(_GrassTex, u_xlat8.xy, 0.0);
					    u_xlat6.xyz = vec3(u_xlat9) * u_xlat3.yzx;
					    u_xlat2.xyz = u_xlat3.xyz * u_xlat2.xxx + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat3.zxy + u_xlat2.xyz;
					    u_xlat9 = u_xlat1.w + -0.5;
					    u_xlat9 = u_xlat9 * 0.25;
					    u_xlat13 = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat2.x = u_xlat2.z + u_xlat2.z;
					    u_xlat10.x = u_xlat2.y * u_xlat2.x;
					    u_xlat13 = u_xlat10.x * 0.300000012 + u_xlat13;
					    u_xlat9 = u_xlat9 * u_xlat13 + 1.0;
					    u_xlat3.xyz = u_xlat4.xyz * vec3(u_xlat9);
					    u_xlat4.xyz = (-u_xlat4.xyz) * vec3(u_xlat9) + _SnowColor.xyz;
					    u_xlat9 = _SnowAmount * 2.0 + -1.0;
					    u_xlat1.x = u_xlat1.x + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb5 = u_xlat5>=1.00999999;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat1.xzw = (-u_xlat4.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat10.x = vs_TEXCOORD3.y;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat1.xzw + u_xlat4.xyz;
					    u_xlati1 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati9 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati1 = u_xlati1 + (-u_xlati9);
					    u_xlat1.x = float(u_xlati1);
					    u_xlat9 = u_xlat1.x * vs_TEXCOORD4.y;
					    u_xlat9 = dFdy(u_xlat9);
					    u_xlat9 = max(u_xlat9, 9.99999975e-05);
					    u_xlat9 = vs_TEXCOORD4.y / u_xlat9;
					    u_xlat13 = _AAFactor + 1.0;
					    u_xlat9 = (-u_xlat13) * _LineWidth + u_xlat9;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10.xy = vec2(u_xlat9) * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat3.xyz = u_xlat4.xyz * u_xlat10.yyy;
					    u_xlat3.xyz = min(u_xlat0.xxx, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat0.xxx);
					    u_xlat9 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat10.x = (-u_xlat9) + 0.100000001;
					    u_xlat9 = u_xlat2.x * u_xlat10.x + u_xlat9;
					    u_xlat9 = (-u_xlat9) + u_xlat2.y;
					    u_xlatb2 = u_xlat2.y==0.0;
					    u_xlat6.x = dFdx(u_xlat9);
					    u_xlat10.x = dFdy(u_xlat9);
					    u_xlat6.x = abs(u_xlat10.x) + abs(u_xlat6.x);
					    u_xlat6.x = min(u_xlat6.x, 1.0);
					    u_xlat9 = u_xlat9 / u_xlat6.x;
					    u_xlat1.x = u_xlat1.x * u_xlat9;
					    u_xlat9 = (u_xlatb2) ? -10.0 : u_xlat9;
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * _LineWidth;
					    u_xlat13 = u_xlat1.x * 0.699999988 + u_xlat9;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) * 0.699999988 + u_xlat9;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat3.xyz + u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat10.yyy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat12 = (u_xlatb5) ? -1.0 : -0.0;
					    u_xlat5 = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat12 = u_xlat12 + u_xlat2.x;
					    u_xlat12 = u_xlat12 * 0.800000012 + u_xlat5;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat12));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat12);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat12 = vs_COLOR1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_18;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_22[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_24;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat18));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat18);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat18 = vs_COLOR1.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec3 _AoTexVolume;
						vec4 unused_0_2;
						vec4 _CliffParams;
						vec4 unused_0_4[3];
						vec4 _LutLerp;
						vec4 unused_0_6[31];
						float _Frost;
						float _Year;
						vec4 unused_0_9;
						vec4 _BloodColor;
						vec4 unused_0_11[5];
						vec4 _SnowColor;
						vec4 _CloudCoverage;
						float _SnowAmount;
						vec4 unused_0_15[4];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_18;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_22[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_24;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_2_2[10];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					uniform  sampler2D _MainTex;
					uniform  sampler2D _GrassTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati13;
					bool u_xlatb13;
					vec2 u_xlat14;
					float u_xlat18;
					int u_xlati18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235);
					    u_xlat12.xy = floor(u_xlat0.xy);
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat12.yx * vec2(15.3400002, 15.3400002);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat12.xy = u_xlat1.xy * vec2(0.400000006, 0.400000006) + u_xlat12.xy;
					    u_xlat1.xy = vs_TEXCOORD2.xy * vec2(12.541235, 12.541235) + (-u_xlat12.xy);
					    u_xlat13.xy = dFdx(u_xlat0.xy);
					    u_xlat0.xy = dFdy(u_xlat0.xy);
					    u_xlat0.xy = abs(u_xlat0.xy) + abs(u_xlat13.xy);
					    u_xlat1.xy = abs(u_xlat1.xy) / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat0.yx;
					    u_xlat0.x = min(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 3.0 + -1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(1.39999998, 1.39999998);
					    u_xlat6.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x / _LineWidth;
					    u_xlat6.x = (-u_xlat6.x) + 1.0;
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat1.xy = unity_MatrixV[2].xz * vec2(3.31229997, 3.31229997);
					    u_xlat12.xy = u_xlat12.xy * vec2(40.1431198, 40.1431198) + u_xlat1.xy;
					    u_xlat12.xy = cos(u_xlat12.xy);
					    u_xlat12.x = u_xlat12.y + u_xlat12.x;
					    u_xlat18 = _Frost * _SnowAmount;
					    u_xlat12.x = u_xlat12.x * 0.5 + u_xlat18;
					    u_xlat12.x = u_xlat12.x + -1.0;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat12.x = u_xlat12.x * u_xlat12.x;
					    u_xlat6.x = u_xlat6.x * u_xlat12.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat6.x = _AoTexVolume.y + -2.0;
					    u_xlat6.x = (-u_xlat6.x) * 0.5 + vs_TEXCOORD4.y;
					    u_xlat6.x = u_xlat6.x * 0.25;
					    u_xlat12.x = u_xlat6.x;
					    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
					    u_xlat6.x = (-u_xlat6.x);
					    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
					    u_xlat18 = max(u_xlat6.x, u_xlat12.x);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat13.x = _Year;
					    u_xlat1.x = float(0.0);
					    u_xlat13.y = float(0.0);
					    u_xlat2 = textureLod(_GrassTex, u_xlat13.xy, 0.0);
					    u_xlat3.xyz = u_xlat12.xxx * u_xlat2.yzx;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.zxy + u_xlat3.xyz;
					    u_xlat13.x = (-vs_COLOR0.w) + 1.0;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat19 = u_xlat2.z + u_xlat2.z;
					    u_xlat2.x = u_xlat2.y * u_xlat19;
					    u_xlat13.x = u_xlat2.x * 0.300000012 + u_xlat13.x;
					    u_xlat3 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat3.w + -0.5;
					    u_xlat2.x = u_xlat2.x * 0.25;
					    u_xlat13.x = u_xlat2.x * u_xlat13.x + 1.0;
					    u_xlat2.xzw = u_xlat6.xyz * u_xlat13.xxx;
					    u_xlat6.xyz = (-u_xlat6.xyz) * u_xlat13.xxx + _SnowColor.xyz;
					    u_xlat13.x = _SnowAmount * 2.0 + -1.0;
					    u_xlat13.x = u_xlat3.x + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat6.xyz = u_xlat13.xxx * u_xlat6.xyz + u_xlat2.xzw;
					    u_xlat0.xyz = u_xlat0.xxx * vs_COLOR1.yyy + u_xlat6.xyz;
					    u_xlat2.xzw = (-u_xlat0.xyz) + vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat18 = vs_TEXCOORD3.y;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xzw + u_xlat0.xyz;
					    u_xlati18 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati13 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati18 = u_xlati18 + (-u_xlati13);
					    u_xlat18 = float(u_xlati18);
					    u_xlat13.x = u_xlat18 * vs_TEXCOORD4.y;
					    u_xlat13.x = dFdy(u_xlat13.x);
					    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
					    u_xlat13.x = vs_TEXCOORD4.y / u_xlat13.x;
					    u_xlat2.x = _AAFactor + 1.0;
					    u_xlat13.x = (-u_xlat2.x) * _LineWidth + u_xlat13.x;
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat14.xy = u_xlat13.xx * vec2(0.100000024, 0.399999976) + vec2(0.899999976, 0.600000024);
					    u_xlat4.xyz = u_xlat0.xyz * u_xlat14.yyy;
					    u_xlat13.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat1.y = u_xlat13.x * 0.100000001;
					    u_xlat5 = textureLod(_CliffTex, u_xlat1.xy, 0.0);
					    u_xlat1.x = u_xlat1.y / _CliffTex_TexelSize.y;
					    u_xlat1.y = u_xlat5.x + -0.5;
					    u_xlat13.x = dFdx(u_xlat1.x);
					    u_xlat1.x = dFdy(u_xlat1.x);
					    u_xlat1.x = abs(u_xlat1.x) + abs(u_xlat13.x);
					    u_xlat1.xy = u_xlat1.xy * vec2(4.0, 4.0);
					    u_xlat1.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.y / u_xlat1.x;
					    u_xlat1.xy = u_xlat1.xx + vec2(-0.5, 0.5);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CliffParams.y;
					    u_xlat1.x = u_xlat1.x * 0.100000024;
					    u_xlat1.x = _CliffParams.y * 0.899999976 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_CliffParams.x);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x + _CliffParams.x;
					    u_xlat7 = (-u_xlat3.w) + 0.5;
					    u_xlat13.x = u_xlat3.y + vs_TEXCOORD3.x;
					    u_xlatb13 = u_xlat13.x>=1.00999999;
					    u_xlat7 = u_xlat7 * 0.0199999996 + 1.0;
					    u_xlat1.x = u_xlat7 * u_xlat1.x;
					    u_xlat3.xyz = min(u_xlat1.xxx, u_xlat4.xyz);
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + (-u_xlat1.xxx);
					    u_xlat7 = vs_COLOR0.w * -0.200000018 + 0.300000012;
					    u_xlat14.x = (-u_xlat7) + 0.100000001;
					    u_xlat7 = u_xlat19 * u_xlat14.x + u_xlat7;
					    u_xlat7 = (-u_xlat7) + u_xlat2.y;
					    u_xlatb19 = u_xlat2.y==0.0;
					    u_xlat8 = dFdx(u_xlat7);
					    u_xlat14.x = dFdy(u_xlat7);
					    u_xlat8 = abs(u_xlat14.x) + abs(u_xlat8);
					    u_xlat8 = min(u_xlat8, 1.0);
					    u_xlat7 = u_xlat7 / u_xlat8;
					    u_xlat18 = u_xlat18 * u_xlat7;
					    u_xlat7 = (u_xlatb19) ? -10.0 : u_xlat7;
					    u_xlat18 = dFdy(u_xlat18);
					    u_xlat18 = max(u_xlat18, -1.0);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat2.x;
					    u_xlat18 = u_xlat18 * _LineWidth;
					    u_xlat19 = u_xlat18 * 0.699999988 + u_xlat7;
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat18 = (-u_xlat18) * 0.699999988 + u_xlat7;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.xyw = vec3(u_xlat19) * u_xlat3.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat14.yyy + (-u_xlat1.xyw);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat0.xyz * _BloodColor.xyz + (-u_xlat0.xyz);
					    u_xlat18 = (u_xlatb13) ? -1.0 : -0.0;
					    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat2.x = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat18 = u_xlat18 + u_xlat2.x;
					    u_xlat18 = u_xlat18 * 0.800000012 + u_xlat13.x;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat18));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat18);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat18 = vs_COLOR1.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[7];
						vec4 _FogColor;
						vec4 unused_0_8;
						vec4 _FlashColor;
						vec4 unused_0_10[8];
					};
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = vs_COLOR0.xyz * vec3(0.0800000057, 0.0800000057, 0.0800000057);
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.699999988, 0.699999988, 0.699999988) + u_xlat0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = (-vec3(u_xlat6)) + u_xlat0.xyz;
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_MIRROR_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[9];
						vec4 _LutLerp;
						vec4 unused_0_2[37];
						vec4 _MirrorColor2;
						vec4 unused_0_4[2];
						vec4 _CloudCoverage;
						vec4 unused_0_6[18];
					};
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					void main()
					{
					    u_xlat0.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat2.xyz = _MirrorColor2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xxx);
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    SV_Target0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = _MirrorColor2.w * 0.5;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_OUTLINE_ON" "_LOWEND_ON" "_CLIFF_MIX" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					int u_xlati2;
					float u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					int u_xlati4;
					float u_xlat5;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x + -0.5;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.100000024;
					    u_xlat0.x = _CliffParams.y * 0.899999976 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati4 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati4);
					    u_xlat2.x = float(u_xlati2);
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD4.y;
					    u_xlat2.x = dFdy(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
					    u_xlat2.x = vs_TEXCOORD4.y / u_xlat2.x;
					    u_xlat4 = _AAFactor + 1.0;
					    u_xlat2.x = (-u_xlat4) * _LineWidth + u_xlat2.x;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = u_xlat2.x * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat1.xy = vs_TEXCOORD3.xx + vec2(-0.200000003, 0.5);
					    u_xlat1.x = u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlatb3 = u_xlat1.y>=1.00999999;
					    u_xlat5 = (u_xlatb3) ? -1.0 : -0.0;
					    u_xlat3 = u_xlatb3 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.800000012 + u_xlat3;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 " {
					Keywords { "_BLOOD_ON" "_GAME_ON" "_LOWEND_ON" "_CLIFF_MIX" "_CLIFF_ON" "_SNOW_ON" "_FROST_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						vec4 _CliffParams;
						vec4 unused_0_2[3];
						vec4 _LutLerp;
						vec4 unused_0_4[33];
						vec4 _BloodColor;
						vec4 unused_0_6[6];
						vec4 _CloudCoverage;
						vec4 unused_0_8[5];
						float _WaterLevel;
						float _LineWidth;
						vec4 unused_0_11;
						vec4 _FogColor;
						float _AAFactor;
						vec4 _FlashColor;
						vec4 unused_0_15[6];
						vec4 _CliffTex_TexelSize;
						vec4 unused_0_17;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					uniform  sampler2D _TilingTex;
					uniform  sampler2D _CliffTex;
					in  vec4 vs_COLOR0;
					in  vec4 vs_COLOR1;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					int u_xlati2;
					float u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					int u_xlati6;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD4.y + _WaterLevel;
					    u_xlat0.y = u_xlat0.x * 0.100000001;
					    u_xlat4 = u_xlat0.y / _CliffTex_TexelSize.y;
					    u_xlat6 = dFdx(u_xlat4);
					    u_xlat4 = dFdy(u_xlat4);
					    u_xlat4 = abs(u_xlat4) + abs(u_xlat6);
					    u_xlat4 = u_xlat4 * 4.0;
					    u_xlat4 = min(u_xlat4, 1.0);
					    u_xlat0.x = 0.0;
					    u_xlat1 = textureLod(_CliffTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = u_xlat1.x * 2.0 + -1.0;
					    u_xlat2 = u_xlat1.x + -0.5;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat1 = texture(_TilingTex, vs_TEXCOORD0.xy);
					    u_xlat6 = u_xlat1.z * 0.800000012;
					    u_xlat0.x = u_xlat6 * u_xlat0.x + u_xlat2;
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.xy = u_xlat0.xx + vec2(-0.5, 0.5);
					    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CliffParams.y;
					    u_xlat0.x = u_xlat0.x * 0.399999976;
					    u_xlat0.x = _CliffParams.y * 0.600000024 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_CliffParams.x);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + _CliffParams.x;
					    u_xlat2 = (-u_xlat1.w) + 0.5;
					    u_xlat4 = u_xlat1.y + vs_TEXCOORD3.x;
					    u_xlatb4 = u_xlat4>=1.00999999;
					    u_xlat2 = u_xlat2 * 0.0199999996 + 1.0;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlati2 = int((0.0<_ProjectionParams.x) ? 0xFFFFFFFFu : uint(0));
					    u_xlati6 = int((_ProjectionParams.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati2 = u_xlati2 + (-u_xlati6);
					    u_xlat2 = float(u_xlati2);
					    u_xlat2 = u_xlat2 * vs_TEXCOORD4.y;
					    u_xlat2 = dFdy(u_xlat2);
					    u_xlat2 = max(u_xlat2, 9.99999975e-05);
					    u_xlat2 = vs_TEXCOORD4.y / u_xlat2;
					    u_xlat6 = _AAFactor + 1.0;
					    u_xlat2 = (-u_xlat6) * _LineWidth + u_xlat2;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * 0.100000024 + 0.899999976;
					    u_xlat0.x = u_xlat2 * u_xlat0.x;
					    u_xlat1.xyz = u_xlat0.xxx * _BloodColor.xyz + (-u_xlat0.xxx);
					    u_xlat2 = (u_xlatb4) ? -1.0 : -0.0;
					    u_xlat4 = u_xlatb4 ? 1.0 : float(0.0);
					    u_xlat6 = vs_TEXCOORD3.x + -0.200000003;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat2 = u_xlat2 + u_xlat6;
					    u_xlat2 = u_xlat2 * 0.800000012 + u_xlat4;
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat1.xyz + u_xlat0.xxx;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, vec3(0.200000003, 0.699999988, 0.100000001));
					    u_xlat0.xyz = u_xlat0.xyz * vs_COLOR0.xyz + (-vec3(u_xlat6));
					    u_xlat0.xyz = _CloudCoverage.yyy * u_xlat0.xyz + vec3(u_xlat6);
					    u_xlat1.xyz = (-u_xlat0.xyz) + _LutLerp.www;
					    u_xlat0.xyz = _LutLerp.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = _FlashColor.xyz * vec3(0.200000003, 0.200000003, 0.200000003) + _FogColor.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat6 = vs_COLOR1.x;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat6) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}